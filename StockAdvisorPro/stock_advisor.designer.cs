#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StockAdvisorPro
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="stock_advisor")]
	public partial class stock_advisorDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertARTICLE(ARTICLE instance);
    partial void UpdateARTICLE(ARTICLE instance);
    partial void DeleteARTICLE(ARTICLE instance);
    partial void InsertUSER_INFO(USER_INFO instance);
    partial void UpdateUSER_INFO(USER_INFO instance);
    partial void DeleteUSER_INFO(USER_INFO instance);
    partial void InsertDICTIONARY(DICTIONARY instance);
    partial void UpdateDICTIONARY(DICTIONARY instance);
    partial void DeleteDICTIONARY(DICTIONARY instance);
    partial void InsertREVIEW(REVIEW instance);
    partial void UpdateREVIEW(REVIEW instance);
    partial void DeleteREVIEW(REVIEW instance);
    partial void InsertSAVED_STOCK(SAVED_STOCK instance);
    partial void UpdateSAVED_STOCK(SAVED_STOCK instance);
    partial void DeleteSAVED_STOCK(SAVED_STOCK instance);
    partial void InsertSTOCK(STOCK instance);
    partial void UpdateSTOCK(STOCK instance);
    partial void DeleteSTOCK(STOCK instance);
    partial void InsertSTOCK_PRICE(STOCK_PRICE instance);
    partial void UpdateSTOCK_PRICE(STOCK_PRICE instance);
    partial void DeleteSTOCK_PRICE(STOCK_PRICE instance);
    #endregion
		
		public stock_advisorDataContext() : 
				base(global::StockAdvisorPro.Properties.Settings.Default.Setting, mappingSource)
		{
			OnCreated();
		}
		
		public stock_advisorDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public stock_advisorDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public stock_advisorDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public stock_advisorDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ARTICLE> ARTICLEs
		{
			get
			{
				return this.GetTable<ARTICLE>();
			}
		}
		
		public System.Data.Linq.Table<USER_INFO> USER_INFOs
		{
			get
			{
				return this.GetTable<USER_INFO>();
			}
		}
		
		public System.Data.Linq.Table<DICTIONARY> DICTIONARies
		{
			get
			{
				return this.GetTable<DICTIONARY>();
			}
		}
		
		public System.Data.Linq.Table<REVIEW> REVIEWs
		{
			get
			{
				return this.GetTable<REVIEW>();
			}
		}
		
		public System.Data.Linq.Table<SAVED_STOCK> SAVED_STOCKs
		{
			get
			{
				return this.GetTable<SAVED_STOCK>();
			}
		}
		
		public System.Data.Linq.Table<STOCK> STOCKs
		{
			get
			{
				return this.GetTable<STOCK>();
			}
		}
		
		public System.Data.Linq.Table<STOCK_PRICE> STOCK_PRICEs
		{
			get
			{
				return this.GetTable<STOCK_PRICE>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ARTICLE")]
	public partial class ARTICLE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Article_text;
		
		private System.DateTime _Article_date;
		
		private bool _Reviewed;
		
		private EntitySet<REVIEW> _REVIEWs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnArticle_textChanging(string value);
    partial void OnArticle_textChanged();
    partial void OnArticle_dateChanging(System.DateTime value);
    partial void OnArticle_dateChanged();
    partial void OnReviewedChanging(bool value);
    partial void OnReviewedChanged();
    #endregion
		
		public ARTICLE()
		{
			this._REVIEWs = new EntitySet<REVIEW>(new Action<REVIEW>(this.attach_REVIEWs), new Action<REVIEW>(this.detach_REVIEWs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Article_text", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Article_text
		{
			get
			{
				return this._Article_text;
			}
			set
			{
				if ((this._Article_text != value))
				{
					this.OnArticle_textChanging(value);
					this.SendPropertyChanging();
					this._Article_text = value;
					this.SendPropertyChanged("Article_text");
					this.OnArticle_textChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Article_date", DbType="DateTime NOT NULL")]
		public System.DateTime Article_date
		{
			get
			{
				return this._Article_date;
			}
			set
			{
				if ((this._Article_date != value))
				{
					this.OnArticle_dateChanging(value);
					this.SendPropertyChanging();
					this._Article_date = value;
					this.SendPropertyChanged("Article_date");
					this.OnArticle_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reviewed", DbType="Bit NOT NULL")]
		public bool Reviewed
		{
			get
			{
				return this._Reviewed;
			}
			set
			{
				if ((this._Reviewed != value))
				{
					this.OnReviewedChanging(value);
					this.SendPropertyChanging();
					this._Reviewed = value;
					this.SendPropertyChanged("Reviewed");
					this.OnReviewedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ARTICLE_REVIEW", Storage="_REVIEWs", ThisKey="id", OtherKey="Article_id")]
		public EntitySet<REVIEW> REVIEWs
		{
			get
			{
				return this._REVIEWs;
			}
			set
			{
				this._REVIEWs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_REVIEWs(REVIEW entity)
		{
			this.SendPropertyChanging();
			entity.ARTICLE = this;
		}
		
		private void detach_REVIEWs(REVIEW entity)
		{
			this.SendPropertyChanging();
			entity.ARTICLE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.USER_INFO")]
	public partial class USER_INFO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Username;
		
		private string _Password;
		
		private EntitySet<DICTIONARY> _DICTIONARies;
		
		private EntitySet<REVIEW> _REVIEWs;
		
		private EntitySet<SAVED_STOCK> _SAVED_STOCKs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public USER_INFO()
		{
			this._DICTIONARies = new EntitySet<DICTIONARY>(new Action<DICTIONARY>(this.attach_DICTIONARies), new Action<DICTIONARY>(this.detach_DICTIONARies));
			this._REVIEWs = new EntitySet<REVIEW>(new Action<REVIEW>(this.attach_REVIEWs), new Action<REVIEW>(this.detach_REVIEWs));
			this._SAVED_STOCKs = new EntitySet<SAVED_STOCK>(new Action<SAVED_STOCK>(this.attach_SAVED_STOCKs), new Action<SAVED_STOCK>(this.detach_SAVED_STOCKs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL UNIQUE", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_INFO_DICTIONARY", Storage="_DICTIONARies", ThisKey="id", OtherKey="User_id")]
		public EntitySet<DICTIONARY> DICTIONARies
		{
			get
			{
				return this._DICTIONARies;
			}
			set
			{
				this._DICTIONARies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_INFO_REVIEW", Storage="_REVIEWs", ThisKey="id", OtherKey="User_id")]
		public EntitySet<REVIEW> REVIEWs
		{
			get
			{
				return this._REVIEWs;
			}
			set
			{
				this._REVIEWs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_INFO_SAVED_STOCK", Storage="_SAVED_STOCKs", ThisKey="id", OtherKey="User_id")]
		public EntitySet<SAVED_STOCK> SAVED_STOCKs
		{
			get
			{
				return this._SAVED_STOCKs;
			}
			set
			{
				this._SAVED_STOCKs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DICTIONARies(DICTIONARY entity)
		{
			this.SendPropertyChanging();
			entity.USER_INFO = this;
		}
		
		private void detach_DICTIONARies(DICTIONARY entity)
		{
			this.SendPropertyChanging();
			entity.USER_INFO = null;
		}
		
		private void attach_REVIEWs(REVIEW entity)
		{
			this.SendPropertyChanging();
			entity.USER_INFO = this;
		}
		
		private void detach_REVIEWs(REVIEW entity)
		{
			this.SendPropertyChanging();
			entity.USER_INFO = null;
		}
		
		private void attach_SAVED_STOCKs(SAVED_STOCK entity)
		{
			this.SendPropertyChanging();
			entity.USER_INFO = this;
		}
		
		private void detach_SAVED_STOCKs(SAVED_STOCK entity)
		{
			this.SendPropertyChanging();
			entity.USER_INFO = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DICTIONARY")]
	public partial class DICTIONARY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _User_id;
		
		private string _Word;
		
		private int _Weight;
		
		private EntityRef<USER_INFO> _USER_INFO;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnUser_idChanging(int value);
    partial void OnUser_idChanged();
    partial void OnWordChanging(string value);
    partial void OnWordChanged();
    partial void OnWeightChanging(int value);
    partial void OnWeightChanged();
    #endregion
		
		public DICTIONARY()
		{
			this._USER_INFO = default(EntityRef<USER_INFO>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_id", DbType="Int NOT NULL")]
		public int User_id
		{
			get
			{
				return this._User_id;
			}
			set
			{
				if ((this._User_id != value))
				{
					if (this._USER_INFO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_idChanging(value);
					this.SendPropertyChanging();
					this._User_id = value;
					this.SendPropertyChanged("User_id");
					this.OnUser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Word", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Word
		{
			get
			{
				return this._Word;
			}
			set
			{
				if ((this._Word != value))
				{
					this.OnWordChanging(value);
					this.SendPropertyChanging();
					this._Word = value;
					this.SendPropertyChanged("Word");
					this.OnWordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Int NOT NULL")]
		public int Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_INFO_DICTIONARY", Storage="_USER_INFO", ThisKey="User_id", OtherKey="id", IsForeignKey=true)]
		public USER_INFO USER_INFO
		{
			get
			{
				return this._USER_INFO.Entity;
			}
			set
			{
				USER_INFO previousValue = this._USER_INFO.Entity;
				if (((previousValue != value) 
							|| (this._USER_INFO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER_INFO.Entity = null;
						previousValue.DICTIONARies.Remove(this);
					}
					this._USER_INFO.Entity = value;
					if ((value != null))
					{
						value.DICTIONARies.Add(this);
						this._User_id = value.id;
					}
					else
					{
						this._User_id = default(int);
					}
					this.SendPropertyChanged("USER_INFO");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.REVIEW")]
	public partial class REVIEW : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_id;
		
		private int _Stock_id;
		
		private int _Article_id;
		
		private int _Score;
		
		private EntityRef<ARTICLE> _ARTICLE;
		
		private EntityRef<USER_INFO> _USER_INFO;
		
		private EntityRef<STOCK> _STOCK;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_idChanging(int value);
    partial void OnUser_idChanged();
    partial void OnStock_idChanging(int value);
    partial void OnStock_idChanged();
    partial void OnArticle_idChanging(int value);
    partial void OnArticle_idChanged();
    partial void OnScoreChanging(int value);
    partial void OnScoreChanged();
    #endregion
		
		public REVIEW()
		{
			this._ARTICLE = default(EntityRef<ARTICLE>);
			this._USER_INFO = default(EntityRef<USER_INFO>);
			this._STOCK = default(EntityRef<STOCK>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int User_id
		{
			get
			{
				return this._User_id;
			}
			set
			{
				if ((this._User_id != value))
				{
					if (this._USER_INFO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_idChanging(value);
					this.SendPropertyChanging();
					this._User_id = value;
					this.SendPropertyChanged("User_id");
					this.OnUser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stock_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Stock_id
		{
			get
			{
				return this._Stock_id;
			}
			set
			{
				if ((this._Stock_id != value))
				{
					if (this._STOCK.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStock_idChanging(value);
					this.SendPropertyChanging();
					this._Stock_id = value;
					this.SendPropertyChanged("Stock_id");
					this.OnStock_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Article_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Article_id
		{
			get
			{
				return this._Article_id;
			}
			set
			{
				if ((this._Article_id != value))
				{
					if (this._ARTICLE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArticle_idChanging(value);
					this.SendPropertyChanging();
					this._Article_id = value;
					this.SendPropertyChanged("Article_id");
					this.OnArticle_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int NOT NULL")]
		public int Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ARTICLE_REVIEW", Storage="_ARTICLE", ThisKey="Article_id", OtherKey="id", IsForeignKey=true)]
		public ARTICLE ARTICLE
		{
			get
			{
				return this._ARTICLE.Entity;
			}
			set
			{
				ARTICLE previousValue = this._ARTICLE.Entity;
				if (((previousValue != value) 
							|| (this._ARTICLE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ARTICLE.Entity = null;
						previousValue.REVIEWs.Remove(this);
					}
					this._ARTICLE.Entity = value;
					if ((value != null))
					{
						value.REVIEWs.Add(this);
						this._Article_id = value.id;
					}
					else
					{
						this._Article_id = default(int);
					}
					this.SendPropertyChanged("ARTICLE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_INFO_REVIEW", Storage="_USER_INFO", ThisKey="User_id", OtherKey="id", IsForeignKey=true)]
		public USER_INFO USER_INFO
		{
			get
			{
				return this._USER_INFO.Entity;
			}
			set
			{
				USER_INFO previousValue = this._USER_INFO.Entity;
				if (((previousValue != value) 
							|| (this._USER_INFO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER_INFO.Entity = null;
						previousValue.REVIEWs.Remove(this);
					}
					this._USER_INFO.Entity = value;
					if ((value != null))
					{
						value.REVIEWs.Add(this);
						this._User_id = value.id;
					}
					else
					{
						this._User_id = default(int);
					}
					this.SendPropertyChanged("USER_INFO");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STOCK_REVIEW", Storage="_STOCK", ThisKey="Stock_id", OtherKey="id", IsForeignKey=true)]
		public STOCK STOCK
		{
			get
			{
				return this._STOCK.Entity;
			}
			set
			{
				STOCK previousValue = this._STOCK.Entity;
				if (((previousValue != value) 
							|| (this._STOCK.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STOCK.Entity = null;
						previousValue.REVIEWs.Remove(this);
					}
					this._STOCK.Entity = value;
					if ((value != null))
					{
						value.REVIEWs.Add(this);
						this._Stock_id = value.id;
					}
					else
					{
						this._Stock_id = default(int);
					}
					this.SendPropertyChanged("STOCK");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SAVED_STOCK")]
	public partial class SAVED_STOCK : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_id;
		
		private int _Stock_id;
		
		private EntityRef<USER_INFO> _USER_INFO;
		
		private EntityRef<STOCK> _STOCK;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_idChanging(int value);
    partial void OnUser_idChanged();
    partial void OnStock_idChanging(int value);
    partial void OnStock_idChanged();
    #endregion
		
		public SAVED_STOCK()
		{
			this._USER_INFO = default(EntityRef<USER_INFO>);
			this._STOCK = default(EntityRef<STOCK>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int User_id
		{
			get
			{
				return this._User_id;
			}
			set
			{
				if ((this._User_id != value))
				{
					if (this._USER_INFO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_idChanging(value);
					this.SendPropertyChanging();
					this._User_id = value;
					this.SendPropertyChanged("User_id");
					this.OnUser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stock_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Stock_id
		{
			get
			{
				return this._Stock_id;
			}
			set
			{
				if ((this._Stock_id != value))
				{
					if (this._STOCK.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStock_idChanging(value);
					this.SendPropertyChanging();
					this._Stock_id = value;
					this.SendPropertyChanged("Stock_id");
					this.OnStock_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_INFO_SAVED_STOCK", Storage="_USER_INFO", ThisKey="User_id", OtherKey="id", IsForeignKey=true)]
		public USER_INFO USER_INFO
		{
			get
			{
				return this._USER_INFO.Entity;
			}
			set
			{
				USER_INFO previousValue = this._USER_INFO.Entity;
				if (((previousValue != value) 
							|| (this._USER_INFO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER_INFO.Entity = null;
						previousValue.SAVED_STOCKs.Remove(this);
					}
					this._USER_INFO.Entity = value;
					if ((value != null))
					{
						value.SAVED_STOCKs.Add(this);
						this._User_id = value.id;
					}
					else
					{
						this._User_id = default(int);
					}
					this.SendPropertyChanged("USER_INFO");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STOCK_SAVED_STOCK", Storage="_STOCK", ThisKey="Stock_id", OtherKey="id", IsForeignKey=true)]
		public STOCK STOCK
		{
			get
			{
				return this._STOCK.Entity;
			}
			set
			{
				STOCK previousValue = this._STOCK.Entity;
				if (((previousValue != value) 
							|| (this._STOCK.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STOCK.Entity = null;
						previousValue.SAVED_STOCKs.Remove(this);
					}
					this._STOCK.Entity = value;
					if ((value != null))
					{
						value.SAVED_STOCKs.Add(this);
						this._Stock_id = value.id;
					}
					else
					{
						this._Stock_id = default(int);
					}
					this.SendPropertyChanged("STOCK");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STOCK")]
	public partial class STOCK : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Symbol;
		
		private EntitySet<REVIEW> _REVIEWs;
		
		private EntitySet<SAVED_STOCK> _SAVED_STOCKs;
		
		private EntitySet<STOCK_PRICE> _STOCK_PRICEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnSymbolChanging(string value);
    partial void OnSymbolChanged();
    #endregion
		
		public STOCK()
		{
			this._REVIEWs = new EntitySet<REVIEW>(new Action<REVIEW>(this.attach_REVIEWs), new Action<REVIEW>(this.detach_REVIEWs));
			this._SAVED_STOCKs = new EntitySet<SAVED_STOCK>(new Action<SAVED_STOCK>(this.attach_SAVED_STOCKs), new Action<SAVED_STOCK>(this.detach_SAVED_STOCKs));
			this._STOCK_PRICEs = new EntitySet<STOCK_PRICE>(new Action<STOCK_PRICE>(this.attach_STOCK_PRICEs), new Action<STOCK_PRICE>(this.detach_STOCK_PRICEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Symbol", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string Symbol
		{
			get
			{
				return this._Symbol;
			}
			set
			{
				if ((this._Symbol != value))
				{
					this.OnSymbolChanging(value);
					this.SendPropertyChanging();
					this._Symbol = value;
					this.SendPropertyChanged("Symbol");
					this.OnSymbolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STOCK_REVIEW", Storage="_REVIEWs", ThisKey="id", OtherKey="Stock_id")]
		public EntitySet<REVIEW> REVIEWs
		{
			get
			{
				return this._REVIEWs;
			}
			set
			{
				this._REVIEWs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STOCK_SAVED_STOCK", Storage="_SAVED_STOCKs", ThisKey="id", OtherKey="Stock_id")]
		public EntitySet<SAVED_STOCK> SAVED_STOCKs
		{
			get
			{
				return this._SAVED_STOCKs;
			}
			set
			{
				this._SAVED_STOCKs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STOCK_STOCK_PRICE", Storage="_STOCK_PRICEs", ThisKey="id", OtherKey="Stock_id")]
		public EntitySet<STOCK_PRICE> STOCK_PRICEs
		{
			get
			{
				return this._STOCK_PRICEs;
			}
			set
			{
				this._STOCK_PRICEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_REVIEWs(REVIEW entity)
		{
			this.SendPropertyChanging();
			entity.STOCK = this;
		}
		
		private void detach_REVIEWs(REVIEW entity)
		{
			this.SendPropertyChanging();
			entity.STOCK = null;
		}
		
		private void attach_SAVED_STOCKs(SAVED_STOCK entity)
		{
			this.SendPropertyChanging();
			entity.STOCK = this;
		}
		
		private void detach_SAVED_STOCKs(SAVED_STOCK entity)
		{
			this.SendPropertyChanging();
			entity.STOCK = null;
		}
		
		private void attach_STOCK_PRICEs(STOCK_PRICE entity)
		{
			this.SendPropertyChanging();
			entity.STOCK = this;
		}
		
		private void detach_STOCK_PRICEs(STOCK_PRICE entity)
		{
			this.SendPropertyChanging();
			entity.STOCK = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STOCK_PRICE")]
	public partial class STOCK_PRICE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _Stock_id;
		
		private decimal _Price;
		
		private System.DateTime _Date;
		
		private EntityRef<STOCK> _STOCK;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnStock_idChanging(int value);
    partial void OnStock_idChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public STOCK_PRICE()
		{
			this._STOCK = default(EntityRef<STOCK>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stock_id", DbType="Int NOT NULL")]
		public int Stock_id
		{
			get
			{
				return this._Stock_id;
			}
			set
			{
				if ((this._Stock_id != value))
				{
					if (this._STOCK.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStock_idChanging(value);
					this.SendPropertyChanging();
					this._Stock_id = value;
					this.SendPropertyChanged("Stock_id");
					this.OnStock_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STOCK_STOCK_PRICE", Storage="_STOCK", ThisKey="Stock_id", OtherKey="id", IsForeignKey=true)]
		public STOCK STOCK
		{
			get
			{
				return this._STOCK.Entity;
			}
			set
			{
				STOCK previousValue = this._STOCK.Entity;
				if (((previousValue != value) 
							|| (this._STOCK.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STOCK.Entity = null;
						previousValue.STOCK_PRICEs.Remove(this);
					}
					this._STOCK.Entity = value;
					if ((value != null))
					{
						value.STOCK_PRICEs.Add(this);
						this._Stock_id = value.id;
					}
					else
					{
						this._Stock_id = default(int);
					}
					this.SendPropertyChanged("STOCK");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
